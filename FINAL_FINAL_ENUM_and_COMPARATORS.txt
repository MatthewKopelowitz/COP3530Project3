enum comparedValue {
    mostYards, //the play with the most yards gained
    leastYards, //the play with the least (or most negative) yards gained 
    earliestInGame, //the play that happens earliest in a game (closest to starting kickoff)
    latestInGame, //the play that happens latest in a game (closest to final time)
    earliestGameDate, //play that occured least recently
    latestGameDate, //play that occured most recently
    mostYardsToGo, //play that had the most yards togo (pre-hike)
    leastYardsToGo, //play that had the least yards togo (pre-hike)
    mostYardsToTD, //play that started most yards away from the opp's endzone
    leastYardsToTD //play that started least yards away from the opp's endzone
};

struct getMostYards {
    bool operator()(Play p1, Play p2) {
        return (p1.yardsGained < p2.yardsGained);
    }
};
struct getLeastYards {
    bool operator()(Play p1, Play p2) {
        return (p1.yardsGained > p2.yardsGained);
    }
};
struct getEarliestInGame {
    bool operator()(Play p1, Play p2) {
        if (p1.quarter > p2.quarter) {
            return true;
        }
        else if (p1.quarter < p2.quarter) {
            return false;
        }
        else {
            if (p1.minute < p2.minute) {
                return true;
            }
            else if (p1.minute > p2.minute) {
                return false;
            }
            else {
                if (p1.second < p2.second) {
                    return true;
                }
                else
                    return false;
            }
        }
    }
};
struct getLatestInGame {
    bool operator()(Play p1, Play p2) {
        if (p1.quarter < p2.quarter) {
            return true;
        }
        else if (p1.quarter > p2.quarter) {
            return false;
        }
        else {
            if (p1.minute > p2.minute) {
                return true;
            }
            else if (p1.minute < p2.minute) {
                return false;
            }
            else {
                if (p1.second > p2.second) {
                    return true;
                }
                else
                    return false;
            }
        }
    }
};
struct getEarliestGameDate {
    bool operator()(Play p1, Play p2) {
        if (p1.yearInt > p2.yearInt) {
            return true;
        }
        else if (p1.yearInt < p2.yearInt) {
            return false;
        }
        else {
            if (p1.monthInt > p2.monthInt) {
                return true;
            }
            else if (p1.monthInt < p2.monthInt) {
                return false;
            }
            else {
                if (p1.dayInt > p2.dayInt) {
                    return true;
                }
                else if (p1.dayInt < p2.dayInt) {
                    return false;
                }
                else {
                    getEarliestInGame obj;
                    return obj(p1, p2);
                }
            }
        }
    }
};
struct getLatestGameDate {
    bool operator()(Play p1, Play p2) {
        if (p1.yearInt < p2.yearInt) {
            return true;
        }
        else if (p1.yearInt > p2.yearInt) {
            return false;
        }
        else {
            if (p1.monthInt < p2.monthInt) {
                return true;
            }
            else if (p1.monthInt > p2.monthInt) {
                return false;
            }
            else {
                if (p1.dayInt < p2.dayInt) {
                    return true;
                }
                else if (p1.dayInt > p2.dayInt) {
                    return false;
                }
                else {
                    getLatestInGame obj;
                    return obj(p1, p2);
                }
            }
        }
    }
};
struct getMostYardsToGo {
    bool operator()(Play p1, Play p2) {
        return (p1.toGo < p2.toGo);
    }
};
struct getLeastYardsToGo {
    bool operator()(Play p1, Play p2) {
        return (p1.toGo > p2.toGo);
    }
};
struct getMostYardsToTD {
    bool operator()(Play p1, Play p2) {
        return (p1.yardLine > p2.yardLine);
    }
};
struct getLeastYardsToTD {
    bool operator()(Play p1, Play p2) {
        return (p1.yardLine < p2.yardLine);
    }
};
