int main() {
    //creating the data map to keep track of team-stratified "play" lists
    unordered_map<string, Team> teams;
    createTeams(teams);

    //initializing the clock (in microseconds)
    using chrono::duration_cast;
    using chrono::microseconds;
    typedef chrono::high_resolution_clock clock;

    //loading the data in from untagged CSV files
    auto start = clock::now();
    loadData("2018_prog_cleaned", teams);
    loadData("2019_prog_cleaned", teams);
    loadData("2020_prog_cleaned", teams);
    auto end = clock::now();
    std::cout << "Data input cost : " << duration_cast<microseconds>(end - start).count() << " microseconds." << endl;

    ////asks the user if they want to see stats for a single team or for top ten teams and records input in isSingleTeam boolean
    //string menuChoice;
    //int int_MC = 0;
    //*cin >> menuChoice;
    //int int_MC = stoi(menuChoice);
    //switch (int_MC) {
    //    case 1:
    //        isSingleTeam = true;
    //        break;
    //    case 2:
    //        isSingleTeam = false;
    //        break;
    //}*/

    ////simple unordered map just to keep track of which seasons the user selects to show stats for
    //unordered_map<string, bool> sznSelect;
    //sznSelect["2018"] = false;
    //sznSelect["2019"] = false;
    //sznSelect["2020"] = false;

    //cout << "\nMENU OPTIONS" << endl;
    //cout << "1. 2018 Season" << endl;
    //cout << "2. 2019 Season" << endl;
    //cout << "3. 2020 Season" << endl;
    //cout << "4. 2018-2019 Seasons" << endl;
    //cout << "5. 2019-2020 Seasons" << endl;
    //cout << "6. 2018-2020 Seasons" << endl;
    //cout << "Please input a number: ";

    //cin >> menuChoice;
    //while (!isValid(menuChoice, 1, 6)) {
    //    cout << "Please re-enter a valid menu choice ('1' through '6'): ";
    //    cin >> menuChoice;
    //}
    //int_MC = stoi(menuChoice);

    ////asks the user which season(s) they want to see stats for and stores their input as booleans in the unordered_map sznSelect
    //switch (int_MC) {
    //    case 1:
    //        sznSelect["2018"] = true;
    //        break;
    //    case 2:
    //        sznSelect["2019"] = true;
    //        break;
    //    case 3:
    //        sznSelect["2020"] = true;
    //        break;
    //    case 4:
    //        sznSelect["2018"] = true;
    //        sznSelect["2019"] = true;
    //        break;
    //    case 5:
    //        sznSelect["2019"] = true;
    //        sznSelect["2020"] = true;
    //        break;
    //    case 6:
    //        sznSelect["2018"] = true;
    //        sznSelect["2019"] = true;
    //        sznSelect["2020"] = true;
    //        break;
    //}

    //cout << "\nMENU OPTIONS" << endl;
    //cout << "Which statistic would you like to see?" << endl;
    //cout << "1. Number of games won by majority plays being running vs passing" << endl;
    //cout << "2. First down completion success rate on running vs passing plays" << endl;
    //cout << "3. Average yards gained on running vs passing plays" << endl;
    //cout << "4. Chance of any play gaining 30+ yards for running vs passing" << endl;
    //cout << "5. Chance of any play being a turnover for running vs passing" << endl;
    //cout << "6. Average yards gained in shotgun formation vs other formations" << endl;
    //cout << "7. Chance of penalty on offense vs defense on running vs passing play" << endl;
    //cout << "Please input a number" << endl;

    //cin >> menuChoice;
    //while (!isValid(menuChoice,1,7)) {
    //    cout << "Please re-enter a valid menu choice ('1' through '7'): ";
    //    cin >> menuChoice;
    //}
    //int_MC = stoi(menuChoice);

    ////switch between sorting according to which stat the user selected
    //vector<Team> sortedTeams;
    //*switch (int_MC) {
    //default case:
    //    break;
    //case 1:
    //    sortedTeams = bubbleSort();
    //    sortedTeams = heapSort();
    //    break;
    //case 2:
    //    sortedTeams = bubbleSort();
    //    sortedTeams = heapSort();
    //    break;
    //case 3:
    //    sortedTeams = bubbleSort();
    //    sortedTeams = heapSort();
    //    break;
    //case 4:
    //    sortedTeams = bubbleSort();
    //    sortedTeams = heapSort();
    //    break;
    //case 5:
    //    sortedTeams = bubbleSort();
    //    sortedTeams = heapSort();
    //    break;
    //case 6:
    //    sortedTeams = bubbleSort();
    //    sortedTeams = heapSort();
    //    break;
    //case 7:
    //    sortedTeams = bubbleSort();
    //    sortedTeams = heapSort();
    //    break;
    //    
    //}
    //*/


    std::cout << endl << endl;
    vector<Play> samplePlayList = teams["MIA"].offensivePlays;
    auto heapStart = clock::now();
    vector<Play> sortedV = heapSort(mostYards, 10, samplePlayList);
    auto heapFinish = clock::now();
    for (Play p : sortedV) {
        p.printData();
    }
    std::cout << "\nHeap Sort cost : " << duration_cast<microseconds>(heapFinish - heapStart).count() << " microseconds." << endl;


    return 0;
}
